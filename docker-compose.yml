version: '3.8'

services:
  # Main PediAssist application
  pediassist:
    build: .
    container_name: pediassist-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PEDIASIST_ENV=production
      - PEDIASIST_DB_PATH=/app/data/pediassist.db
      - PEDIASIST_LOG_LEVEL=INFO
      - PEDIASIST_ENCRYPTION_KEY=${PEDIASIST_ENCRYPTION_KEY}
      - PEDIASIST_JWT_SECRET=${PEDIASIST_JWT_SECRET}
      - PEDIASIST_LICENSE_KEY=${PEDIASIST_LICENSE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
    volumes:
      - pediassist_data:/app/data
      - pediassist_logs:/app/logs
      - pediassist_cache:/app/cache
    depends_on:
      - redis
      - postgres
    networks:
      - pediassist_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: pediassist-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pediassist_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL for production database
  postgres:
    image: postgres:15-alpine
    container_name: pediassist-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=pediassist
      - POSTGRES_USER=pediassist
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - pediassist_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pediassist -d pediassist"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: pediassist-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/configs/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/configs/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - pediassist
    networks:
      - pediassist_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: pediassist-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pediassist_network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: pediassist-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/configs/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - pediassist_network

volumes:
  pediassist_data:
  pediassist_logs:
  pediassist_cache:
  redis_data:
  postgres_data:
  nginx_logs:
  prometheus_data:
  grafana_data:

networks:
  pediassist_network:
    driver: bridge
